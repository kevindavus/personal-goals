{"version":3,"sources":["commands/complete.js"],"names":["type","checkConf","dir","getFileName","fs","ensureDir","files","readdir","menu","Menu","bg","fg","width","reset","write","prettyName","map","item","startsWith","add","on","label","close","completeGoal","process","stdin","pipe","createStream","stdout","setRawMode","end","err","console","error","path","require","moment","confTypes","confAliases","confDir","ls","module","exports","command","aliases","desc","example","builder","yargs","default","handler","argv","includes","hasOwnProperty","goal","date","format","join","move","then"],"mappings":"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","file":"complete.js","sourcesContent":["// @flow\n\nconst path = require(\"path\");\nconst fs = require(\"fs-extra\");\nconst Menu = require(\"terminal-menu\");\nconst moment = require(\"moment\");\nconst { prettyName, getFileName } = require(\"../utils/file\");\nconst { checkConf, confTypes, confAliases, confDir } = require(\"./config\");\nconst { ls } = require(\"./ls\");\n\nmodule.exports = {\n  command: \"complete [type] [goal]\",\n  aliases: [\"c\"],\n  desc: \"mark a goal as completed\",\n  example: \"$0 c w \",\n  builder: (yargs: { default: (string, string) => mixed }) =>\n    yargs.default(\"type\", \"w\"),\n  handler: (argv: { type: string, goal: string }) => {\n    checkConf();\n\n    let type: string;\n    if (confTypes.includes(argv.type)) {\n      type = argv.type;\n    } else if (confAliases.hasOwnProperty(argv.type)) {\n      type = confAliases[argv.type];\n    } else {\n      type = argv.type;\n    }\n    if (argv.goal) {\n      completeGoal(type, argv.goal);\n    } else {\n      menu(type);\n    }\n  }\n};\n\nfunction completeGoal(type: string, goal: string): void {\n  const date = moment().format(\"MMMDDYYYYHHmm\");\n  const dir = path.join(confDir, \"completed\", type, date);\n\n  fs\n    .move(\n      getFileName(type, goal),\n      getFileName(path.join(\"completed\", type, date), goal)\n    )\n    .then(() => ls(\"all\"));\n}\n\nasync function menu(type: string): Promise<void> {\n  checkConf();\n  const dir = getFileName(type, \"\");\n  await fs.ensureDir(dir);\n  const files = await fs.readdir(dir);\n  try {\n    const menu = new Menu({ bg: \"black\", fg: \"white\", width: 100 });\n\n    menu.reset();\n    menu.write(\"Which \" + prettyName(type) + \" Goal Did You Complete?\\n\");\n    menu.write(\"-------------------------------------\\n\");\n    files.map((item: string) => {\n      if (!item.startsWith(\".\")) {\n        menu.add(prettyName(item));\n      }\n    });\n    menu.add(\"None\");\n\n    menu.on(\"select\", (label: string) => {\n      menu.close();\n      if (label === \"None\") {\n        return;\n      }\n      completeGoal(type, label);\n    });\n    process.stdin.pipe(menu.createStream()).pipe(process.stdout);\n\n    process.stdin.setRawMode(true);\n    menu.on(\"close\", () => {\n      process.stdin.setRawMode(false);\n      process.stdin.end();\n    });\n  } catch (err) {\n    console.error(err);\n  }\n}\n"]}