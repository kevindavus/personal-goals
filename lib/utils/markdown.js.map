{"version":3,"sources":["utils/markdown.js"],"names":["path","require","moment","fs","checkConf","confTypes","confTitles","confFocus","confReadme","confDir","prettyName","date","module","exports","write","existsSync","join","readme","read","truncate","writeFile","err","console","error","generate","res","getMDTemplate","printAll","types","forEach","type","markdownPrint","opts","dir","ensureDirSync","files","readdirSync","length","removeSync","item","startsWith","stats","statSync","isDirectory","match","isFile","format","readFileSync","startPhrase","endSearchPhrase","endMatchPhrase","idx","search","substring","goalEnd","goalEndPhrases","goalEndPhrase","substr","weeklyFocus","weekly","focus","day","titles","title"],"mappings":"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","file":"markdown.js","sourcesContent":["// @flow\n\nconst path = require(\"path\");\nconst moment = require(\"moment\");\nconst fs = require(\"fs-extra\");\nconst {\n  checkConf,\n  confTypes,\n  confTitles,\n  confFocus,\n  confReadme,\n  confDir\n} = require(\"../commands/config\");\nconst prettyName = require(\"./file\").prettyName;\n\nconst date = moment();\n\nmodule.exports = {\n  write(): void {\n    checkConf();\n    if (fs.existsSync(path.join(confReadme, \"README.md\"))) {\n      const readme = read();\n      fs.truncate(path.join(confReadme, \"README.md\"), 0, () => {\n        fs.writeFile(path.join(confReadme, \"README.md\"), readme, err => {\n          if (err) {\n            return console.error(\"Error writing file: \" + err);\n          }\n        });\n      });\n    } else {\n      fs.truncate(path.join(confReadme, \"README.md\"), 0, () => {\n        fs.writeFile(path.join(confReadme, \"README.md\"), generate(), err => {\n          if (err) {\n            return console.error(\"Error writing file: \" + err);\n          }\n        });\n      });\n    }\n  }\n};\n\nfunction generate(): string {\n  const res = `\nPersonal Goals\n==============\nPersonal goals made open source for accessibility across computers I use, transparency, accountability, and versioning. Learn more about it [here](http://una.im/personal-goals-guide).\n\nGenerated by the [personal-goals-cli](https://github.com/kevindavus/personal-goals-cli)\n\n${getMDTemplate(\"yearly\")}\n${getMDTemplate(\"weekly-focus\")}\n${printAll()}\n\n`;\n  return res;\n}\n\nfunction printAll(): string {\n  const types = confTypes;\n  let res = \"\";\n  types.forEach(type => {\n    if (type !== \"yearly\") {\n      res += getMDTemplate(type) + \"\\n\";\n    }\n  });\n  return res;\n}\n\nfunction markdownPrint(type, opts = {}): string {\n  const dir = path.join(confDir, type);\n  fs.ensureDirSync(dir);\n  let res = \"\";\n  const files = fs.readdirSync(dir);\n  if (files.length === 0) {\n    fs.removeSync(dir);\n    return \"\";\n  }\n  files.forEach(item => {\n    if (!item.startsWith(\".\")) {\n      const stats = fs.statSync(path.join(dir, item));\n      if (stats.isDirectory()) {\n        if (item.match(/\\w{3}\\d{5,6}/g)) {\n          opts.date = item;\n        } else {\n          res += `\\n***${item}***\\n`;\n        }\n        res += markdownPrint(path.join(type, item), opts);\n      } else if (stats.isFile()) {\n        if (typeof opts.date === \"string\") {\n          res += `* [x] ${prettyName(item)} - _${moment(\n            opts.date,\n            \"MMMDDYYYYHHmm\"\n          ).format(\"MMMM Do YYYY\")}_\\n`;\n        } else {\n          res += `* [ ] ${prettyName(item)}\\n`;\n        }\n      }\n    }\n  });\n  return res;\n}\n\nfunction read(): string {\n  let readme = fs.readFileSync(path.join(confReadme, \"README.md\"), \"utf8\");\n  let res = \"\";\n  let startPhrase = /<!-- goals (\\S+) start-->/i;\n  let endSearchPhrase = /<!-- goals (\\S+) end-->/i;\n  let endMatchPhrase = /<!-- goals (\\S+) end-->/g;\n  let idx = readme.search(startPhrase);\n  while (idx !== -1) {\n    const stats = readme.match(startPhrase);\n    if (stats != null && typeof readme === \"string\") {\n      res += readme.substring(0, idx);\n      res += getMDTemplate(stats[1]);\n      const goalEnd = readme.search(endSearchPhrase);\n      const goalEndPhrases: ?Array<string> = readme.match(endMatchPhrase);\n      let goalEndPhrase = \"\";\n      if (goalEndPhrases != null) {\n        goalEndPhrase = goalEndPhrases[0];\n        readme = readme.substr(goalEnd + goalEndPhrase.length);\n        idx = readme.search(/<!-- goals (\\S+) start-->/i);\n      } else {\n        idx = -1;\n      }\n    }\n  }\n  return res;\n}\n\nfunction getMDTemplate(type): string {\n  const weeklyFocus = confFocus.weekly;\n  let focus = \"\";\n  if (weeklyFocus.length > 0) {\n    focus += \"### This Week's Focus: \" + weeklyFocus + \"\\n\";\n  }\n\n  let res = `<!-- goals ${type} start-->`;\n  if (type === \"weekly-focus\") {\n    res += `\n\n${focus}\n# ${date.day(1).format(\"MMM Do, YYYY\")}`;\n  } else {\n    const titles = confTitles;\n    let title = \"\";\n    if (type === \"yearly\") {\n      title += \"# \";\n    } else {\n      title += \"### \";\n    }\n    if (typeof titles[type] === \"string\") {\n      title += titles[type] + \": \";\n    } else {\n      title += `${prettyName(type)} Goals: `;\n    }\n    res += `\n\n${title}\n        \n${markdownPrint(type)}${markdownPrint(\"completed/\" + type)}`;\n  }\n  res += `\n<!-- goals ${type} end-->`;\n\n  return res;\n}\n"]}