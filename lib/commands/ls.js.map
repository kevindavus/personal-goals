{"version":3,"sources":["commands/ls.js"],"names":["path","require","moment","chalk","fs","prettyName","getFileName","write","checkConf","confTypes","confAliases","module","exports","command","aliases","usage","description","builder","yargs","default","handler","argv","type","includes","console","log","ls","res","types","forEach","thisType","title","bold","underline","print","join","opts","dir","accomplishments","files","readdirSync","length","removeSync","stats","statSync","item","isDirectory","match","date","isFile","split","slice","diff","moveSync","day","format","get","month","year","green","gray","fromNow","startsWith"],"mappings":"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","file":"ls.js","sourcesContent":["// @flow\n\nconst path = require(\"path\");\nconst moment = require(\"moment\");\nconst chalk = require(\"chalk\");\nconst fs = require(\"fs-extra\");\nconst { prettyName, getFileName } = require(\"../utils/file\");\nconst { write } = require(\"../utils/markdown\");\nconst { checkConf, confTypes, confAliases } = require(\"./config\");\n\nmodule.exports = {\n  command: {\n    command: \"ls [type]\",\n    aliases: [\"list\"],\n    usage: `$0 ls  <w, m, y, o, c, a>`,\n    description: `list goals of a type`,\n    builder: (yargs: { default: (type: string, value: string) => mixed }) =>\n      yargs.default(\"type\", \"a\"),\n    handler: (argv: { type: string }) => {\n      checkConf();\n\n      let type;\n      if (confTypes.includes(argv.type)) {\n        type = argv.type;\n      } else if (typeof confAliases[argv.type] === \"string\") {\n        type = confAliases[argv.type];\n      } else {\n        switch (argv.type) {\n          case \"a\":\n            type = \"all\";\n            break;\n          case \"complete\":\n          case \"c\":\n            type = \"completed\";\n            break;\n          default:\n            type = argv.type;\n            break;\n        }\n      }\n      console.log(ls(type));\n    }\n  },\n  ls\n};\n\nfunction ls(type: string): string {\n  let res = \"\";\n  if (typeof confAliases[type] === \"string\") {\n    type = confAliases[type];\n  } else {\n    switch (type) {\n      case \"a\":\n        type = \"all\";\n        break;\n      case \"complete\":\n      case \"c\":\n        type = \"completed\";\n        break;\n      default:\n        break;\n    }\n  }\n  const types: Array<string> = confTypes;\n  if (type === \"all\") {\n    types.forEach(thisType => {\n      res += ls(thisType);\n    });\n  } else {\n    checkConf();\n    const title = prettyName(type) + \" Tasks\";\n    res += \"\\n\" + chalk.bold.underline(title) + \"\\n\";\n    res += print(type);\n    if (type !== \"completed\") {\n      res += print(path.join(\"completed\", type));\n    }\n  }\n  write();\n  return res;\n}\n\nfunction print(type: string, opts?: { date?: string } = {}): string {\n  const dir = getFileName(type);\n  const accomplishments = getFileName(\"accomplishments\");\n  let res = \"\";\n  const files = fs.readdirSync(dir);\n  if (files.length === 0) {\n    fs.removeSync(dir);\n    return \"\";\n  }\n  files.forEach(item => {\n    const stats = fs.statSync(path.join(dir, item));\n    if (stats.isDirectory()) {\n      if (item.match(/\\w{3}\\d{9,10}/g)) {\n        opts.date = item;\n      } else {\n        res += \"\\n\" + chalk.underline(item) + \"\\n\";\n      }\n      res += print(path.join(type, item), opts);\n    } else if (stats.isFile()) {\n      if (typeof opts.date === \"string\") {\n        type = type.split(\"/\").slice(-2, -1)[0];\n        if (\n          type === \"weekly\" &&\n          moment(opts.date, \"MMMDDYYYYHHmm\").diff(moment(), \"day\") < -6\n        ) {\n          fs.moveSync(\n            path.join(dir, item),\n            path.join(\n              accomplishments,\n              type,\n              moment()\n                .day(-6)\n                .format(\"MMMDDYYYY\"),\n              item\n            )\n          );\n        } else if (\n          type === \"monthly\" &&\n          moment(opts.date, \"MMMDDYYYYHHmm\").get(\"month\") <\n            moment().get(\"month\")\n        ) {\n          fs.moveSync(\n            path.join(\n              accomplishments,\n              type,\n              moment()\n                .month(moment().get(\"m\") - 1)\n                .format(\"MMMM-YYYY\"),\n              item\n            )\n          );\n        } else if (\n          type === \"yearly\" &&\n          moment(opts.date, \"MMMDDYYYYHHmm\").get(\"year\") < moment().get(\"year\")\n        ) {\n          fs.moveSync(\n            path.join(\n              accomplishments,\n              type,\n              moment()\n                .year(moment().get(\"y\") - 1)\n                .format(\"YYYY\"),\n              item\n            )\n          );\n        } else {\n          res += `${chalk.green(prettyName(item))} ${chalk.gray(\n            \"- \" + moment(opts.date, \"MMMDDYYYYHHmm\").fromNow()\n          )}\\n`;\n        }\n      } else if (!item.startsWith(\".\")) {\n        res += prettyName(item) + \"\\n\";\n      }\n    }\n  });\n  return res;\n}\n"]}