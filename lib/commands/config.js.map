{"version":3,"sources":["commands/config.js"],"names":["path","require","fs","Configstore","moment","date","defaultConf","dir","join","resolve","readme","types","focus","weekly","alias","w","week","m","month","y","year","o","title","monthly","format","yearly","today","tomorrow","add","conf","chalk","setConf","set","confFocus","get","confAliases","confTitles","confTypes","confDir","confReadme","module","exports","command","aliases","usage","description","examples","handler","argv","value","key","clearConf","console","log","all","includes","red","bold","push","detail","checkConf","green","Object","keys","forEach","splice","indexOf","type","delete","clear","pathExistsSync"],"mappings":"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","file":"config.js","sourcesContent":["// @flow\n\nconst path = require(\"path\");\nconst fs: constructor = require(\"fs-extra\");\nconst Configstore: constructor = require(\"configstore\");\nconst moment: constructor = require(\"moment\");\n\nconst date: {\n  format: (format: string) => string,\n  add: (qty: number, unit: string) => constructor\n} = moment();\nconst defaultConf = {\n  dir: path.join(path.resolve(), \"goals\"),\n  readme: path.resolve(),\n  types: [\"yearly\", \"weekly\", \"monthly\", \"other\"],\n  focus: {\n    weekly: \"Be Awesome.\"\n  },\n  alias: {\n    w: \"weekly\",\n    week: \"weekly\",\n    m: \"monthly\",\n    month: \"monthly\",\n    y: \"yearly\",\n    year: \"yearly\",\n    o: \"other\"\n  },\n  title: {\n    weekly: `Things I'll Do This Week`,\n    monthly: `Things I'll Do This Month (${date.format(\"MMMM YYYY\")}) `,\n    yearly: `Overarching Goals`,\n    today: ` Goals for ${date.format(\"dddd, MMMM Do YYYY\")}`,\n    tomorrow: `Goals for ${date.add(1, \"d\").format(\"dddd, MMMM Do YYYY\")}`\n  }\n};\nconst conf: constructor = new Configstore(\"personal-goals-cli\", defaultConf);\nconst chalk: {\n  bold: (string: string) => string,\n  green: (string: string) => string,\n  red: (string: string) => string\n} = require(\"chalk\");\nconst setConf: (key: string | mixed, value?: string) => void = conf.set;\n\nconst confFocus: { weekly: string } = conf.get(\"focus\");\nconst confAliases: {\n  w: string,\n  o: string,\n  m: string,\n  y: string,\n  week: string,\n  month: string,\n  year: string\n} = conf.get(\"alias\");\nconst confTitles: {\n  weekly: string,\n  monthly: string,\n  yearly: string,\n  other: string,\n  today: string,\n  tomorrow: string\n} = conf.get(\"titles\");\nconst confTypes: Array<string> = conf.get(\"types\");\nconst confDir: string = conf.get(\"dir\");\nconst confReadme: string = conf.get(\"readme\");\n\nmodule.exports = {\n  confFocus,\n  confTypes,\n  confTitles,\n  confAliases,\n  confDir,\n  confReadme,\n  command: {\n    command: \"config <key> [value] [detail]\",\n    aliases: [\"cfg\", \"conf\"],\n    usage: \"$0 config <key> [value]\",\n    description: \"Set up the personal goals configuration\",\n    examples: [\n      \"$0 cfg dir '/user/me/projects/personal-goals'\",\n      \"$0 config weeklyfocus 'get outside more'\"\n    ],\n    handler: (argv: { key: string, value: string, detail: string }) => {\n      if (\n        argv.value === \"clear\" ||\n        argv.value === \"clr\" ||\n        argv.value === \"del\" ||\n        argv.value === \"delete\"\n      ) {\n        const value = argv.key;\n        const key = argv.value;\n        argv.value = value;\n        argv.key = key;\n        clearConf(argv);\n      } else if (\n        argv.key === \"clear\" ||\n        argv.key === \"clr\" ||\n        argv.key === \"del\" ||\n        argv.key === \"delete\"\n      ) {\n        clearConf(argv);\n      } else if (argv.key === \"ls\" || argv.key === \"get\") {\n        console.log(conf.all);\n      } else if (argv.key === \"type\" || argv.key === \"types\") {\n        if (confTypes.includes(argv.value)) {\n          console.log(\n            chalk.red(\"Error adding new type: \"),\n            chalk.bold(argv.value),\n            \" already exists as a type\"\n          );\n        } else if (typeof confAliases[argv.value] === \"string\") {\n          console.log(\n            chalk.red(\"Error adding new type: \"),\n            chalk.bold(argv.value),\n            \" already exists as an alias to \",\n            chalk.bold(confAliases[argv.value])\n          );\n        } else {\n          confTypes.push(argv.value);\n          conf.set(\"types\", confTypes);\n          console.log(confTypes);\n        }\n      } else if (\n        argv.key === \"focus\" ||\n        argv.key === \"focuses\" ||\n        argv.key === \"foci\"\n      ) {\n        if (confTypes.includes(argv.value)) {\n          confFocus[argv.value] = argv.detail;\n          conf.set(\"focus\", confFocus);\n        } else if (typeof confAliases[argv.value] === \"string\") {\n          confFocus[confAliases[argv.value]] = argv.detail;\n          conf.set(\"focus\", confFocus);\n          console.log(confFocus);\n        }\n      } else if (argv.key === \"alias\" || argv.key === \"aliases\") {\n        if (confTypes.includes(argv.value)) {\n          console.log(\n            chalk.red(\"Error adding new alias: \"),\n            chalk.bold(argv.value),\n            \" already exists as a type\"\n          );\n        } else if (typeof confAliases[argv.value] === \"string\") {\n          console.log(\n            chalk.red(\"Error adding new alias: \"),\n            chalk.bold(argv.value),\n            \" already exists as an alias to \",\n            chalk.bold(confAliases[argv.value])\n          );\n        } else {\n          confAliases[argv.value] = argv.detail;\n          conf.set(\"alias\", confAliases);\n          console.log(confAliases);\n        }\n      } else if (argv.key === \"title\" || argv.key === \"titles\") {\n        if (confTypes.includes(argv.value)) {\n          confTitles[argv.value] = argv.detail;\n          conf.set(\"titles\", confTitles);\n        } else if (typeof confAliases[argv.value] === \"string\") {\n          confTitles[confAliases[argv.value]] = argv.detail;\n          conf.set(\"title\", confTitles);\n          console.log(confTitles);\n        }\n      } else {\n        conf.set(argv.key, argv.value);\n        checkConf();\n        console.log(chalk.green(\"Successfully updated green: \"));\n        console.log(chalk.bold(argv.key), \":\", conf.get(argv.key));\n      }\n    }\n  },\n\n  checkConf,\n\n  conf\n};\nfunction clearConf(argv): void {\n  if (typeof argv.value === \"string\") {\n    if (typeof argv.detail === \"string\") {\n      switch (argv.value) {\n        case \"focus\":\n        case \"focuses\":\n          if (confTypes.includes(argv.detail)) {\n            delete confFocus[argv.detail];\n            conf.set(\"focus\", confFocus);\n            console.log(confFocus);\n          } else if (typeof confAliases[argv.detail] === \"string\") {\n            delete confFocus[argv.detail];\n            conf.set(\"focus\", confFocus);\n            console.log(confFocus);\n          } else {\n            console.log(\n              chalk.red(\n                \"Error deleting \" + chalk.bold(argv.detail) + \" confFocus :\"\n              ),\n              chalk.bold(argv.detail),\n              \" not found as type or alias\"\n            );\n          }\n          break;\n        case \"title\":\n        case \"titles\":\n          if (confTypes.includes(argv.detail)) {\n            delete confTitles[argv.detail];\n            conf.set(\"title\", confTitles);\n            console.log(confTitles);\n          } else if (typeof confAliases[argv.detail] === \"string\") {\n            delete confTitles[argv.detail];\n            conf.set(\"title\", confTitles);\n            console.log(confTitles);\n          } else {\n            console.log(\n              chalk.red(\n                \"Error deleting \" + chalk.bold(argv.detail) + \" title :\"\n              ),\n              chalk.bold(argv.detail),\n              \" not found as type or alias\"\n            );\n          }\n          break;\n        case \"alias\":\n        case \"confAliases\":\n          if (typeof confAliases[argv.detail] === \"string\") {\n            delete confAliases[argv.detail];\n            conf.set(\"alias\", confAliases);\n            console.log(confAliases);\n          } else {\n            console.log(\n              chalk.red(\n                \"Error deleting \" + chalk.bold(argv.detail) + \" confFocus :\"\n              ),\n              chalk.bold(argv.detail),\n              \" not found as alias\"\n            );\n          }\n          break;\n        case \"types\":\n        case \"type\":\n          if (confTypes.includes(argv.detail)) {\n            Object.keys(confAliases).forEach(key => {\n              if (confAliases[key] === argv.detail) {\n                delete confAliases[key];\n              }\n            });\n            confTypes.splice(confTypes.indexOf(argv.detail), 1);\n            conf.set(\"types\", confTypes);\n            conf.set(\"alias\", confAliases);\n            console.log(conf.all);\n          } else if (typeof confAliases[argv.detail] === \"string\") {\n            const type = confAliases[argv.detail];\n            Object.keys(confAliases).forEach(key => {\n              if (confAliases[key] === type) {\n                delete confAliases[key];\n              }\n            });\n            confTypes.splice(confTypes.indexOf(type), 1);\n            conf.set(\"types\", confTypes);\n            conf.set(\"alias\", confAliases);\n            console.log(conf.all);\n          } else {\n            console.log(\n              chalk.red(\n                \"Error deleting \" + chalk.bold(argv.detail) + \" type :\"\n              ),\n              chalk.bold(argv.detail),\n              \" type not found\"\n            );\n          }\n          break;\n        default:\n          break;\n      }\n    } else {\n      conf.delete(argv.value);\n      console.log(conf.all);\n    }\n  } else {\n    conf.clear();\n    conf.set(defaultConf);\n    console.log(conf.all);\n  }\n}\nfunction checkConf(): void {\n  if (!fs.pathExistsSync(confDir)) {\n    console.log(\"setting working directory to \", path.resolve());\n    conf.set(\"dir\", path.resolve(\"goals\"));\n    conf.set(\"readme\", path.resolve());\n  }\n}\n"]}