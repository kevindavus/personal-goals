const path = require("path");
const moment = require("moment");
const fs = require("fs-extra");
const { conf, checkConf } = require("../config");
const prettyName = require("./file").prettyName;

const md = {
  yearly: `<!-- goals yearly start-->
# ${conf.get("title").yearly}:
### This year's focus: ${conf.get("focus").yearly || ""}
  
    
${markdownPrint("yearly")}${markdownPrint(
    "completed/yearly"
  )}<!-- goals yearly end-->`,
  monthly: `<!-- goals monthly start-->
# ${conf.get("title").monthly}:
### This month's focus: ${conf.get("focus").monthly || ""}
  
${markdownPrint("monthly")}${markdownPrint(
    "completed/monthly"
  )}<!-- goals monthly end-->`,
  weekly: `<!-- goals weekly start-->
# ${conf.get("title").weekly}:
### This week's focus: ${conf.get("focus").weekly || ""}
  
${markdownPrint("weekly")}${markdownPrint(
    "completed/weekly"
  )}<!-- goals weekly end-->`
};

module.exports = {
  write() {
    checkConf();
    if (fs.existsSync(path.join(conf.get("readme"), "README.md"))) {
      const readme = read();
      fs.truncate(path.join(conf.get("readme"), "README.md"), 0, () => {
        fs.writeFile(
          path.join(conf.get("readme"), "README.md"),
          readme,
          err => {
            if (err) {
              return console.log("Error writing file: " + err);
            }
          }
        );
      });
    } else {
      fs.truncate(path.join(conf.get("readme"), "README.md"), 0, () => {
        fs.writeFile(
          path.join(conf.get("readme"), "README.md"),
          generate(),
          err => {
            if (err) {
              return console.log("Error writing file: " + err);
            }
          }
        );
      });
    }
  }
};

function generate() {
  const res = `
Personal Goals
==============
Personal goals made open source for accessibility across computers I use, transparency, accountability, and versioning. Learn more about it [here](http://una.im/personal-goals-guide).

Generated by the [personal-goals-cli](https://github.com/kevindavus/personal-goals-cli)
${printAll()}

`;
  return res;
}

function printAll() {
  const types = conf.get("types");
  let res = "";
  types.forEach(type => {
    res += getMDTemplate(type) + "\n";
  });
  return res;
}

function markdownPrint(type, opts = {}) {
  const dir = path.join(conf.get("dir"), type);
  fs.ensureDirSync(dir);
  let res = "";
  const files = fs.readdirSync(dir);
  if (files.length === 0) {
    fs.removeSync(dir);
    return "";
  }
  files.forEach(item => {
    if (!item.startsWith(".")) {
      const stats = fs.statSync(path.join(dir, item));
      if (stats.isDirectory()) {
        if (item.match(/\w{3}\d{5,6}/g)) {
          opts.date = item;
        } else {
          res += `\n***${item}***\n`;
        }
        res += markdownPrint(path.join(type, item), opts);
      } else if (stats.isFile()) {
        if (typeof opts.date === "string") {
          res += `* [x] ${prettyName(item)} _- ${moment(
            opts.date,
            "MMMDDYYYYHHmm"
          ).format("MMMM Do YYYY")}_\n`;
        } else {
          res += `* [ ] ${prettyName(item)}\n`;
        }
      }
    }
  });
  return res;
}

function read() {
  let readme = fs.readFileSync(
    path.join(conf.get("readme"), "README.md"),
    "utf8"
  );
  let res = "";
  let idx = readme.search(/<!-- goals (\S+) start-->/i);
  while (idx !== -1) {
    const stats = readme.match(/<!-- goals (\S+) start-->/i);
    res += readme.substring(0, idx);
    // Console.log(md[stats[1]]);
    res += getMDTemplate(stats[1]);
    readme = readme.substr(
      readme.search(/<!-- goals (\S+) end-->/i) +
        readme.match(/<!-- goals (\S+) end-->/g)[0].length
    );
    idx = readme.search(/<!-- goals (\S+) start-->/i);
  }
  return res;
}

function getMDTemplate(type) {
  const titles = conf.get("title");
  let title = "";
  if (typeof titles[type] === "string") {
    title = titles[type];
  } else {
    title = `${prettyName(type)} Goals`;
  }
  switch (type) {
    case "weekly":
      return md.weekly;
    case "yearly":
      return md.yearly;
    case "monthly":
      return md.monthly;
    default:
      res = `<!-- goals ${type} start-->

# ${title}:
        
${markdownPrint(type)}${markdownPrint("completed/" + type)}`;
      if (typeof conf.get("focus")[type] === "string") {
        res +=
          "\nThe focus for " +
          type +
          ": " +
          conf.get("focus")[type] +
          "<!-- goals ${type} end-->";
      } else {
        res += "<!-- goals ${type} end-->";
      }
      return res;
  }
}
