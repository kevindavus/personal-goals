{"version":3,"sources":["commands/complete.js"],"names":["path","require","fs","Menu","moment","prettyName","getFileName","write","checkConf","confTypes","confAliases","confDir","ls","module","exports","command","aliases","desc","example","builder","yargs","default","handler","argv","type","includes","goal","completeGoal","menu","date","format","dir","join","ensureDirSync","moveSync","console","log","files","readdirSync","bg","fg","width","reset","map","add","item","on","close","label","process","stdin","pipe","createStream","stdout"],"mappings":"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","file":"complete.js","sourcesContent":["// @flow\n\nconst path = require(\"path\");\nconst fs = require(\"fs-extra\");\nconst Menu = require(\"terminal-menu\");\nconst moment = require(\"moment\");\nconst { prettyName, getFileName } = require(\"../utils/file\");\nconst { write } = require(\"../utils/markdown\");\nconst { checkConf, confTypes, confAliases, confDir } = require(\"./config\");\nconst { ls } = require(\"./ls\");\n\nmodule.exports = {\n  command: \"complete [type] [goal]\",\n  aliases: [\"c\"],\n  desc: \"mark a goal as completed\",\n  example: \"$0 c w \",\n  builder: (yargs: { default: (string, string) => mixed }) =>\n    yargs.default(\"type\", \"w\"),\n  handler: (argv: { type: string, goal: string }) => {\n    checkConf();\n\n    let type;\n    if (confTypes.includes(argv.type)) {\n      type = argv.type;\n    } else if (typeof confAliases[argv.type] === \"string\") {\n      type = confAliases[argv.type];\n    } else {\n      type = argv.type;\n    }\n    if (argv.goal) {\n      completeGoal(type, argv.goal);\n    } else {\n      menu(type);\n    }\n  }\n};\n\nfunction completeGoal(type, goal): void {\n  const date = moment().format(\"MMMDDYYYYHHmm\");\n  const dir = path.join(confDir, \"completed\", type, date);\n  fs.ensureDirSync(dir);\n  fs.moveSync(\n    getFileName(type, goal),\n    getFileName(path.join(\"completed\", type, date), goal)\n  );\n  console.log(ls(\"all\"));\n  write();\n}\n\nfunction menu(type): void {\n  checkConf();\n  const dir = getFileName(type, \"\");\n  fs.ensureDirSync(dir);\n  const files = fs.readdirSync(dir);\n  const menu = new Menu({ bg: \"black\", fg: \"white\", width: 100 });\n\n  menu.reset();\n  menu.write(\"Which \" + prettyName(type) + \" Goal Did You Complete?\\n\");\n  menu.write(\"-------------------------------------\\n\");\n  files.map(item => menu.add(prettyName(item)));\n  menu.add(\"None\");\n\n  menu.on(\"select\", label => {\n    menu.close();\n    if (label === \"None\") {\n      return;\n    }\n    completeGoal(type, label);\n  });\n  process.stdin.pipe(menu.createStream()).pipe(process.stdout);\n}\n"]}