{"version":3,"sources":["commands/delete.js"],"names":["path","require","fs","Menu","chalk","recRead","prettyName","getFileName","checkConf","confTypes","confAliases","confDir","ls","module","exports","command","aliases","desc","example","builder","yargs","default","handler","argv","type","includes","goal","deleteGoal","menu","indexOf","substr","length","join","findCompletedFile","console","log","removeSync","dir","completedDir","pathExistsSync","bg","fg","width","reset","write","files","readdirSync","forEach","add","item","completed","on","close","label","process","stdin","pipe","createStream","stdout","red","bold","ensureDirSync","stats","statSync","isDirectory","isFile"],"mappings":"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","file":"delete.js","sourcesContent":["// @flow\n\nconst path = require(\"path\");\nconst fs = require(\"fs-extra\");\nconst Menu = require(\"terminal-menu\");\nconst chalk = require(\"chalk\");\nconst recRead = require(\"recursive-readdir-sync\");\nconst { prettyName, getFileName } = require(\"../utils/file\");\nconst { checkConf, confTypes, confAliases, confDir } = require(\"./config\");\nconst { ls } = require(\"./ls\");\n\nmodule.exports = {\n  command: \"delete [type] [goal]\",\n  aliases: [\"d\", \"del\"],\n  desc: \"delete a goal\",\n  example: \"$0 d w \",\n  builder: (yargs: { default: (string, string) => mixed }) =>\n    yargs.default(\"type\", \"w\"),\n  handler: (argv: { type: string, goal: string }) => {\n    checkConf();\n\n    let type;\n    if (confTypes.includes(argv.type)) {\n      type = argv.type;\n    } else if (typeof confAliases[argv.type] === \"string\") {\n      type = confAliases[argv.type];\n    } else {\n      type = argv.type;\n    }\n    if (argv.goal) {\n      deleteGoal(type, argv.goal);\n    } else {\n      menu(type);\n    }\n  }\n};\n\nfunction deleteGoal(type, goal) {\n  if (goal.indexOf(\"✔\") >= 0) {\n    goal = goal.substr(\"✔ \".length + 1);\n    type = path.join(\"completed\", type);\n    findCompletedFile(type, goal);\n    console.log(ls(\"all\"));\n  } else {\n    fs.removeSync(getFileName(type, goal));\n  }\n  console.log(ls(\"all\"));\n}\n\nfunction menu(type) {\n  checkConf();\n  const dir = getFileName(type, \"\");\n  const completedDir = getFileName(path.join(\"completed\", type), \"\");\n  if (fs.pathExistsSync(dir) || fs.pathExistsSync(completedDir)) {\n    const menu = new Menu({ bg: \"black\", fg: \"white\", width: 100 });\n\n    menu.reset();\n    menu.write(\n      \"Which \" + prettyName(type) + \" Goal would you like to delete?\\n\"\n    );\n    menu.write(\"-------------------------------------\\n\");\n    if (fs.pathExistsSync(dir)) {\n      const files = fs.readdirSync(dir);\n      files.forEach(item => menu.add(prettyName(item)));\n    }\n\n    if (fs.pathExistsSync(completedDir)) {\n      const completed = recRead(getFileName(path.join(\"completed\", type)));\n      completed.forEach(item => menu.add(\"✔︎ \" + prettyName(item)));\n    }\n    menu.add(\"None\");\n\n    menu.on(\"select\", label => {\n      menu.close();\n      if (label === \"None\") {\n        return;\n      }\n      deleteGoal(type, label);\n    });\n    process.stdin.pipe(menu.createStream()).pipe(process.stdout);\n  } else {\n    console.log(\n      chalk.red.bold(\"Error: \") + \" there are no goals of type \" + type\n    );\n  }\n}\n\nfunction findCompletedFile(type, goal) {\n  const dir = path.join(confDir, type);\n  fs.ensureDirSync(dir);\n  const files = fs.readdirSync(dir);\n  if (files.length === 0) {\n    fs.removeSync(dir);\n    return;\n  }\n  files.forEach(item => {\n    const stats = fs.statSync(path.join(dir, item));\n    if (stats.isDirectory()) {\n      findCompletedFile(path.join(type, item), goal);\n    } else if (stats.isFile()) {\n      if (prettyName(item) === prettyName(goal)) {\n        fs.removeSync(dir);\n      }\n    }\n  });\n}\n"]}