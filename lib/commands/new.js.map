{"version":3,"sources":["commands/new.js"],"names":["type","goal","checkConf","date","moment","format","file","getFileName","filePath","completedFile","path","join","fs","stat","err","console","log","rename","code","err2","stat2","ensureDirSync","close","openSync","newGoal","require","confTypes","confAliases","confDir","ls","write","module","exports","command","aliases","desc","example","handler","argv","includes","hasOwnProperty"],"mappings":";gCAgCA,WAAuBA,IAAvB,EAA6BC,IAA7B,EAAkD;AAChDC;AACA,UAAMC,OAAOC,SAASC,MAAT,CAAgB,eAAhB,CAAb;AACA,UAAMC,OAAOC,YAAYP,IAAZ,EAAkBC,IAAlB,CAAb;AACA,UAAMO,WAAWD,YAAYP,IAAZ,CAAjB;AACA,UAAMS,gBAAgBF,YAAYG,KAAKC,IAAL,CAAU,WAAV,EAAuBX,IAAvB,EAA6BG,IAA7B,CAAZ,EAAgDF,IAAhD,CAAtB;AACAW,OAAGC,IAAH,CAAQJ,aAAR;AAAA,oCAAuB,WAAeK,GAAf,EAAoBD,IAApB,EAA0B;AAC/C,YAAIC,OAAO,IAAX,EAAiB;AACf;AACAC,kBAAQC,GAAR,CAAY,mCAAmChB,IAA/C;AACAY,aAAGK,MAAH,CAAUX,IAAV,EAAgBG,aAAhB;AACD,SAJD,MAIO,IAAIK,IAAII,IAAJ,IAAY,QAAhB,EAA0B;AAC/BN,aAAGC,IAAH,CAAQP,IAAR;AAAA,0CAAc,WAAea,IAAf,EAAqBC,KAArB,EAA4B;AACxC,kBAAID,QAAQ,IAAZ,EAAkB;AAChB;AACAJ,wBAAQC,GAAR,CAAY,qBAAZ;AACD,eAHD,MAGO,IAAIG,KAAKD,IAAL,IAAa,QAAjB,EAA2B;AAChCN,mBAAGS,aAAH,CAAiBb,QAAjB;AACA;AACAI,mBAAGU,KAAH,CAASV,GAAGW,QAAH,CAAYjB,IAAZ,EAAkB,GAAlB,CAAT;AACD;AACF,aATD;;AAAA;AAAA;AAAA;AAAA;AAUD;AACF,OAjBD;;AAAA;AAAA;AAAA;AAAA;AAkBD,G;;kBAxBckB,O;;;;;;;AA9Bf,MAAMd,OAAOe,QAAQ,MAAR,CAAb;AACA,MAAMrB,SAASqB,QAAQ,QAAR,CAAf;AACA,MAAMb,KAAKa,QAAQ,UAAR,CAAX;AACA,MAAM,EAAElB,WAAF,KAAkBkB,QAAQ,eAAR,CAAxB;AACA,MAAM,EAAEvB,SAAF,EAAawB,SAAb,EAAwBC,WAAxB,EAAqCC,OAArC,KAAiDH,QAAQ,UAAR,CAAvD;AACA,MAAM,EAACI,EAAD,KAAOJ,QAAQ,MAAR,CAAb;AACA,MAAM,EAAEK,KAAF,KAAYL,QAAQ,mBAAR,CAAlB;;AAEAM,OAAOC,OAAP,GAAiB;AACfC,WAAS,mBADM;AAEfC,WAAS,CAAC,GAAD,CAFM;AAGfC,QAAM,gBAHS;AAIfC,WAAS,2BAJM;AAKfC;AAAA,iCAAS,WAAOC,IAAP,EAAgD;AACvDpC;;AAEA,UAAIF,IAAJ;AACA,UAAI0B,UAAUa,QAAV,CAAmBD,KAAKtC,IAAxB,CAAJ,EAAmC;AACjCA,eAAOsC,KAAKtC,IAAZ;AACD,OAFD,MAEO,IAAI2B,YAAYa,cAAZ,CAA2BF,KAAKtC,IAAhC,CAAJ,EAA2C;AAChDA,eAAO2B,YAAYW,KAAKtC,IAAjB,CAAP;AACD,OAFM,MAEA;AACLA,eAAOsC,KAAKtC,IAAZ;AACD;AACD,YAAMwB,QAAQxB,IAAR,EAAcsC,KAAKrC,IAAnB,CAAN;AACA4B,SAAG,KAAH;AACAC;AACD,KAdD;;AAAA;AAAA;AAAA;AAAA;AALe,CAAjB","file":"new.js","sourcesContent":["// @flow\n\nconst path = require(\"path\");\nconst moment = require(\"moment\");\nconst fs = require(\"fs-extra\");\nconst { getFileName } = require(\"../utils/file\");\nconst { checkConf, confTypes, confAliases, confDir } = require(\"./config\");\nconst {ls} = require(\"./ls\")\nconst { write } = require(\"../utils/markdown\");\n\nmodule.exports = {\n  command: \"new [type] [goal]\",\n  aliases: [\"n\"],\n  desc: \"Set a new goal\",\n  example: \"$0 n w 'work out 3 times'\",\n  handler: async (argv: { type: string, goal: string }) => {\n    checkConf();\n\n    let type: string;\n    if (confTypes.includes(argv.type)) {\n      type = argv.type;\n    } else if (confAliases.hasOwnProperty(argv.type)) {\n      type = confAliases[argv.type];\n    } else {\n      type = argv.type;\n    }\n    await newGoal(type, argv.goal);\n    ls(\"all\");\n    write();\n  }\n};\n\nasync function newGoal(type, goal): Promise<void> {\n  checkConf();\n  const date = moment().format(\"MMMDDYYYYHHmm\");\n  const file = getFileName(type, goal);\n  const filePath = getFileName(type);\n  const completedFile = getFileName(path.join(\"completed\", type, date), goal);\n  fs.stat(completedFile, async function(err, stat) {\n    if (err == null) {\n      //file exists\n      console.log(\"Moving goal from completed to \" + type);\n      fs.rename(file, completedFile);\n    } else if (err.code == \"ENOENT\") {\n      fs.stat(file, async function(err2, stat2) {\n        if (err2 == null) {\n          //file exists\n          console.log(\"Goal already exists\");\n        } else if (err2.code == \"ENOENT\") {\n          fs.ensureDirSync(filePath);\n          //file does not exist\n          fs.close(fs.openSync(file, \"w\"));\n        }\n      });\n    }\n  });\n}\n"]}