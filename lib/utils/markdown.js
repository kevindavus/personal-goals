"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var path = require("path");
var moment = require("moment");
var fs = require("fs-extra");

var _require = require("../commands/config"),
    checkConf = _require.checkConf,
    confTypes = _require.confTypes,
    confTitles = _require.confTitles,
    confFocus = _require.confFocus,
    confReadme = _require.confReadme,
    confDir = _require.confDir;

var prettyName = require("./file").prettyName;

var date = moment();

module.exports = {
  write: function write() {
    checkConf();
    if (fs.existsSync(path.join(confReadme, "README.md"))) {
      var readme = read();
      fs.truncate(path.join(confReadme, "README.md"), 0, function () {
        fs.writeFile(path.join(confReadme, "README.md"), readme, function (err) {
          if (err) {
            return console.log("Error writing file: " + err);
          }
        });
      });
    } else {
      fs.truncate(path.join(confReadme, "README.md"), 0, function () {
        fs.writeFile(path.join(confReadme, "README.md"), generate(), function (err) {
          if (err) {
            return console.log("Error writing file: " + err);
          }
        });
      });
    }
  }
};

function generate() {
  var res = "\nPersonal Goals\n==============\nPersonal goals made open source for accessibility across computers I use, transparency, accountability, and versioning. Learn more about it [here](http://una.im/personal-goals-guide).\n\nGenerated by the [personal-goals-cli](https://github.com/kevindavus/personal-goals-cli)\n\n" + getMDTemplate("yearly") + "\n" + getMDTemplate("weekly-focus") + "\n" + printAll() + "\n\n";
  return res;
}

function printAll() {
  var types = confTypes;
  var res = "";
  types.forEach(function (type) {
    if (type !== "yearly") {
      res += getMDTemplate(type) + "\n";
    }
  });
  return res;
}

function markdownPrint(type) {
  var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var dir = path.join(confDir, type);
  fs.ensureDirSync(dir);
  var res = "";
  var files = fs.readdirSync(dir);
  if (files.length === 0) {
    fs.removeSync(dir);
    return "";
  }
  files.forEach(function (item) {
    if (!item.startsWith(".")) {
      var stats = fs.statSync(path.join(dir, item));
      if (stats.isDirectory()) {
        if (item.match(/\w{3}\d{5,6}/g)) {
          opts.date = item;
        } else {
          res += "\n***" + item + "***\n";
        }
        res += markdownPrint(path.join(type, item), opts);
      } else if (stats.isFile()) {
        if (typeof opts.date === "string") {
          res += "* [x] " + prettyName(item) + " - _" + moment(opts.date, "MMMDDYYYYHHmm").format("MMMM Do YYYY") + "_\n";
        } else {
          res += "* [ ] " + prettyName(item) + "\n";
        }
      }
    }
  });
  return res;
}

function read() {
  var readme = fs.readFileSync(path.join(confReadme, "README.md"), "utf8");
  var res = "";
  var startPhrase = /<!-- goals (\S+) start-->/i;
  var endSearchPhrase = /<!-- goals (\S+) end-->/i;
  var endMatchPhrase = /<!-- goals (\S+) end-->/g;
  var idx = readme.search(startPhrase);
  while (idx !== -1) {
    var stats = readme.match(startPhrase);
    if ((typeof stats === "undefined" ? "undefined" : _typeof(stats)) === "object" && typeof readme === "string") {
      res += readme.substring(0, idx);
      res += getMDTemplate(stats[1]);
      var goalEnd = readme.search(endSearchPhrase);
      var goalEndPhrases = readme.match(endMatchPhrase);
      var goalEndPhrase = "";
      if (goalEndPhrases != null) {
        goalEndPhrase = goalEndPhrases[0];
        readme = readme.substr(goalEnd + goalEndPhrase.length);
      }
    }
    idx = readme.search(/<!-- goals (\S+) start-->/i);
  }
  return res;
}

function getMDTemplate(type) {
  var weeklyFocus = confFocus.weekly;
  var focus = "";
  if (weeklyFocus.length > 0) {
    focus += "### This Week's Focus: " + weeklyFocus + "\n";
  }

  var res = "<!-- goals " + type + " start-->";
  if (type === "weekly-focus") {
    res += "\n\n" + focus + "\n# " + date.day(1).format("MMM Do, YYYY");
  } else {
    var titles = confTitles;
    var title = "";
    if (type === "yearly") {
      title += "# ";
    } else {
      title += "### ";
    }
    if (typeof titles[type] === "string") {
      title += titles[type] + ": ";
    } else {
      title += prettyName(type) + " Goals: ";
    }
    res += "\n\n" + title + "\n        \n" + markdownPrint(type) + markdownPrint("completed/" + type);
  }
  res += "\n<!-- goals " + type + " end-->";

  return res;
}
//# sourceMappingURL=markdown.js.map
