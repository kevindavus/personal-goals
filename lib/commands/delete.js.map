{"version":3,"sources":["commands/delete.js"],"names":["type","checkConf","dir","getFileName","completedDir","path","join","files","fs","readdir","completedFiles","recursive","isEmpty","length","menu","Menu","bg","fg","width","reset","write","prettyName","forEach","add","item","on","close","label","deleteGoal","process","stdin","pipe","createStream","stdout","setRawMode","end","console","log","chalk","bold","red","err","error","require","confTypes","confAliases","confDir","ls","module","exports","command","aliases","desc","example","builder","yargs","default","handler","argv","includes","hasOwnProperty","goal","indexOf","substr","findCompletedFile","remove","then","ensureDir","Promise","reject","map","stat","stats","isDirectory","isFile"],"mappings":"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","file":"delete.js","sourcesContent":["// @flow\n\nconst path = require(\"path\");\nconst fs = require(\"fs-extra\");\nconst Menu = require(\"terminal-menu\");\nconst chalk = require(\"chalk\");\nconst recursive = require(\"recursive-readdir\");\nconst { prettyName, getFileName } = require(\"../utils/file\");\nconst { checkConf, confTypes, confAliases, confDir } = require(\"./config\");\nconst { ls } = require(\"./ls\");\n\nmodule.exports = {\n  command: \"delete [type] [goal]\",\n  aliases: [\"d\", \"del\"],\n  desc: \"delete a goal\",\n  example: \"$0 d w \",\n  builder: (yargs: { default: (string, string) => mixed }) =>\n    yargs.default(\"type\", \"w\"),\n  handler: (argv: { type: string, goal: string }) => {\n    checkConf();\n\n    let type: string;\n    if (confTypes.includes(argv.type)) {\n      type = argv.type;\n    } else if (confAliases.hasOwnProperty(argv.type)) {\n      type = confAliases[argv.type];\n    } else {\n      type = argv.type;\n    }\n    if (argv.goal) {\n      deleteGoal(type, argv.goal);\n    } else {\n      menu(type);\n    }\n  }\n};\n\nfunction deleteGoal(type: string, goal: string) {\n  if (goal.indexOf(\"✔\") >= 0) {\n    goal = goal.substr(\"✔ \".length + 1);\n    type = path.join(\"completed\", type);\n    findCompletedFile(type, goal);\n  } else {\n    fs.remove(getFileName(type, goal)).then(() => ls(\"all\"));\n  }\n}\n\nasync function menu(type) {\n  checkConf();\n  const dir = getFileName(type, \"\");\n  const completedDir = getFileName(path.join(\"completed\", type));\n  const files = await fs.readdir(dir);\n  const completedFiles = await recursive(completedDir);\n  const isEmpty = files.length === 0 && completedFiles.length === 0;\n  const menu = new Menu({ bg: \"black\", fg: \"white\", width: 100 });\n\n  menu.reset();\n  menu.write(\"Which \" + prettyName(type) + \" Goal would you like to delete?\\n\");\n  menu.write(\"-------------------------------------\\n\");\n  try {\n    if (!isEmpty) {\n      files.forEach(item => menu.add(prettyName(item)));\n\n      completedFiles.forEach(item => menu.add(\"✔︎ \" + prettyName(item)));\n\n      menu.add(\"None\");\n\n      menu.on(\"select\", label => {\n        menu.close();\n        if (label === \"None\") {\n          return;\n        }\n        deleteGoal(type, label);\n      });\n      process.stdin.pipe(menu.createStream()).pipe(process.stdout);\n\n      process.stdin.setRawMode(true);\n      menu.on(\"close\", () => {\n        process.stdin.setRawMode(false);\n        process.stdin.end();\n      });\n    } else {\n      console.log(\n        chalk.bold(chalk.red(\"Error: \")) + \" there are no goals of type \" + type\n      );\n    }\n  } catch (err) {\n    console.error(err);\n  }\n}\n\nfunction findCompletedFile(type, goal) {\n  const dir = path.join(confDir, type);\n  return fs.ensureDir(dir).then(() => {\n    return fs.readdir(dir).then(files => {\n      if (files.length === 0) {\n        fs.remove(dir).then(() => Promise.reject());\n      }\n      files.map(item => {\n        return fs.stat(path.join(dir, item)).then(stats => {\n          if (stats.isDirectory()) {\n            return findCompletedFile(path.join(type, item), goal);\n          } else if (stats.isFile()) {\n            if (prettyName(item) === prettyName(goal)) {\n              return fs.remove(dir);\n            }\n          }\n        });\n      });\n    });\n  });\n}\n"]}