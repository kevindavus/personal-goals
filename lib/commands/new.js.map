{"version":3,"sources":["commands/new.js"],"names":["path","require","moment","fs","getFileName","write","checkConf","confTypes","confAliases","confDir","ls","module","exports","command","aliases","desc","example","handler","argv","type","includes","newGoal","goal","date","format","file","completedfile","join","ensureDirSync","existsSync","console","log","moveSync","ensureFileSync","closeSync","openSync"],"mappings":";;AAEA,IAAMA,OAAOC,QAAQ,MAAR,CAAb;AACA,IAAMC,SAASD,QAAQ,QAAR,CAAf;AACA,IAAME,KAAKF,QAAQ,UAAR,CAAX;;eACwBA,QAAQ,eAAR,C;IAAhBG,W,YAAAA,W;;gBACUH,QAAQ,mBAAR,C;IAAVI,K,aAAAA,K;;gBAC+CJ,QAAQ,UAAR,C;IAA/CK,S,aAAAA,S;IAAWC,S,aAAAA,S;IAAWC,W,aAAAA,W;IAAaC,O,aAAAA,O;;gBAC5BR,QAAQ,MAAR,C;IAAPS,E,aAAAA,E;;AAERC,OAAOC,OAAP,GAAiB;AACfC,WAAS,mBADM;AAEfC,WAAS,CAAC,GAAD,CAFM;AAGfC,QAAM,gBAHS;AAIfC,WAAS,2BAJM;AAKfC,WAAS,iBAACC,IAAD,EAA0C;AACjDZ;;AAEA,QAAIa,aAAJ;AACA,QAAIZ,UAAUa,QAAV,CAAmBF,KAAKC,IAAxB,CAAJ,EAAmC;AACjCA,aAAOD,KAAKC,IAAZ;AACD,KAFD,MAEO,IAAI,OAAOX,YAAYU,KAAKC,IAAjB,CAAP,KAAkC,QAAtC,EAAgD;AACrDA,aAAOX,YAAYU,KAAKC,IAAjB,CAAP;AACD,KAFM,MAEA;AACLA,aAAOD,KAAKC,IAAZ;AACD;AACDE,YAAQF,IAAR,EAAcD,KAAKI,IAAnB;AACD;AAjBc,CAAjB;;AAoBA,SAASD,OAAT,CAAiBF,IAAjB,EAAuBG,IAAvB,EAAmC;AACjChB;AACA,MAAMiB,OAAOrB,SAASsB,MAAT,CAAgB,eAAhB,CAAb;AACA,MAAMC,OAAOrB,YAAYe,IAAZ,EAAkBG,IAAlB,CAAb;AACA,MAAMI,gBAAgBtB,YAAYJ,KAAK2B,IAAL,CAAU,WAAV,EAAuBR,IAAvB,EAA6BI,IAA7B,CAAZ,EAAgDD,IAAhD,CAAtB;AACAnB,KAAGyB,aAAH,CAAiB5B,KAAK2B,IAAL,CAAUlB,OAAV,EAAmBU,IAAnB,CAAjB;AACA,MAAIhB,GAAG0B,UAAH,CAAcH,aAAd,CAAJ,EAAkC;AAChCI,YAAQC,GAAR,CAAY,mCAAmCZ,IAA/C;AACAhB,OAAG6B,QAAH,CAAYN,aAAZ,EAA2BD,IAA3B;AACAK,YAAQC,GAAR,CAAYrB,GAAGS,IAAH,CAAZ;AACD,GAJD,MAIO,IAAIhB,GAAG0B,UAAH,CAAcJ,IAAd,CAAJ,EAAyB;AAC9BK,YAAQC,GAAR,CAAY,qBAAZ;AACD,GAFM,MAEA;AACL;AACA5B,OAAG8B,cAAH,CAAkBR,IAAlB;AACAtB,OAAG+B,SAAH,CAAa/B,GAAGgC,QAAH,CAAYV,IAAZ,EAAkB,GAAlB,CAAb;AACAK,YAAQC,GAAR,CAAYrB,GAAG,KAAH,CAAZ;AACD;AACDL;AACD","file":"new.js","sourcesContent":["// @flow\n\nconst path = require(\"path\");\nconst moment = require(\"moment\");\nconst fs = require(\"fs-extra\");\nconst { getFileName } = require(\"../utils/file\");\nconst { write } = require(\"../utils/markdown\");\nconst { checkConf, confTypes, confAliases, confDir } = require(\"./config\");\nconst { ls } = require(\"./ls\");\n\nmodule.exports = {\n  command: \"new [type] [goal]\",\n  aliases: [\"n\"],\n  desc: \"Set a new goal\",\n  example: \"$0 n w 'work out 3 times'\",\n  handler: (argv: { type: string, goal: string }) => {\n    checkConf();\n\n    let type;\n    if (confTypes.includes(argv.type)) {\n      type = argv.type;\n    } else if (typeof confAliases[argv.type] === \"string\") {\n      type = confAliases[argv.type];\n    } else {\n      type = argv.type;\n    }\n    newGoal(type, argv.goal);\n  }\n};\n\nfunction newGoal(type, goal): void {\n  checkConf();\n  const date = moment().format(\"MMMDDYYYYHHmm\");\n  const file = getFileName(type, goal);\n  const completedfile = getFileName(path.join(\"completed\", type, date), goal);\n  fs.ensureDirSync(path.join(confDir, type));\n  if (fs.existsSync(completedfile)) {\n    console.log(\"Moving goal from completed to \" + type);\n    fs.moveSync(completedfile, file);\n    console.log(ls(type));\n  } else if (fs.existsSync(file)) {\n    console.log(\"Goal already exists\");\n  } else {\n    // File does not exist\n    fs.ensureFileSync(file);\n    fs.closeSync(fs.openSync(file, \"w\"));\n    console.log(ls(\"all\"));\n  }\n  write();\n}\n"]}