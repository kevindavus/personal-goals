{"version":3,"sources":["commands/ls.js"],"names":["type","res","confAliases","types","confTypes","i","console","log","map","thisType","ls","title","prettyName","indexOf","chalk","bold","underline","print","path","join","opts","dir","getFileName","fs","pathExists","accomplishments","files","readdir","length","remove","goals","item","stats","stat","isDirectory","match","date","startsWith","isFile","isCurrent","err","Promise","all","then","results","error","includes","split","slice","moment","diff","move","day","format","get","month","year","green","gray","fromNow","require","checkConf","module","exports","command","aliases","usage","description","builder","yargs","default","handler","argv","hasOwnProperty"],"mappings":"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","file":"ls.js","sourcesContent":["// @flow\n\nconst path = require(\"path\");\nconst moment = require(\"moment\");\nconst chalk = require(\"chalk\");\nconst fs = require(\"fs-extra\");\nconst { prettyName, getFileName } = require(\"../utils/file\");\nconst { checkConf, confTypes, confAliases } = require(\"./config\");\n\nmodule.exports = {\n  command: {\n    command: \"ls [type]\",\n    aliases: [\"list\"],\n    usage: `$0 ls  <w, m, y, o, c, a>`,\n    description: `list goals of a type`,\n    builder: (yargs: { default: (type: string, value: string) => mixed }) =>\n      yargs.default(\"type\", \"a\"),\n    handler: (argv: { type: string }) => {\n      let type: string;\n      if (confTypes.includes(argv.type)) {\n        type = argv.type;\n      } else if (confAliases.hasOwnProperty(argv.type)) {\n        type = confAliases[argv.type];\n      } else {\n        switch (argv.type) {\n          case \"a\":\n            type = \"all\";\n            break;\n          case \"complete\":\n          case \"c\":\n            type = \"completed\";\n            break;\n          default:\n            type = argv.type;\n            break;\n        }\n      }\n      ls(type);\n    }\n  },\n  ls\n};\n\nasync function ls(type: string): Promise<void> {\n  let res = \"\";\n  //check if user passed in an alias to a type\n  if (type && typeof confAliases.type === \"string\") {\n    type = confAliases[type];\n  } else {\n    switch (type) {\n      case \"a\":\n        type = \"all\";\n        break;\n      case \"complete\":\n      case \"c\":\n        type = \"completed\";\n        break;\n      default:\n        break;\n    }\n  }\n\n  const types: Array<string> = confTypes;\n  if (type === \"all\") {\n    for(let i = 0; i < 3; i++) {\n        console.log('\\r\\n');\n    }\n    //list all known types\n    types.map(async thisType => {\n      await ls(thisType);\n    });\n    for(let i = 0; i < 3; i++) {\n        console.log('\\r\\n');\n    }\n  } else {\n    //list specified type\n    const title = prettyName(type) + \" Tasks\";\n\n    if (type.indexOf(\"completed\") === -1) {\n      //if user didn't already specify a completed type, also include the included goals of that type\n      console.log(\n        chalk.bold.underline(title) +\n          \"\\n\" +\n          (await print(type)) +\n          \"\\n\" +\n          (await print(path.join(\"completed\", type)))\n      );\n    } else {\n      console.log(\n        \"\\n\" + chalk.bold.underline(title) + \"\\n\" + (await print(type))\n      );\n    }\n    return;\n  }\n}\n\nasync function print(\n  type: string,\n  opts?: { date?: string } = {}\n): Promise<string> {\n  const dir = getFileName(type);\n  if (await fs.pathExists(dir)) {\n    try {\n      const accomplishments = getFileName(\"accomplishments\");\n      let res = \"\";\n      const files = await fs.readdir(dir);\n      try {\n        if (files.length === 0) {\n          fs.remove(dir);\n          return \"\";\n        }\n        const goals = await files.map(async item => {\n          const stats = await fs.stat(path.join(dir, item));\n          try {\n            if (stats.isDirectory()) {\n              if (item.match(/\\w{3}\\d{9,10}/g)) {\n                opts.date = item;\n              } else if (!item.startsWith(\".\")) {\n                return (await chalk.underline(item)) + \"\\n\";\n              }\n              return await print(path.join(type, item), opts);\n            } else if (stats.isFile()) {\n              if (typeof opts.date === \"string\") {\n                return await isCurrent(\n                  type,\n                  opts.date,\n                  dir,\n                  item,\n                  accomplishments\n                );\n              } else if (!item.startsWith(\".\")) {\n                return (await prettyName(item)) + \"\\n\";\n              }\n            }\n          } catch (err) {\n            console.log(err);\n            return \"\";\n          }\n        });\n        return Promise.all(goals).then(results => results.join(\"\"));\n      } catch (err) {\n        console.log(err);\n        return \"\";\n      }\n    } catch (err) {\n      console.error(err);\n    }\n  }\n  return \"\";\n}\n\nasync function isCurrent(\n  type: string,\n  date: string = \"\",\n  dir: string,\n  item: string,\n  accomplishments: string\n): Promise<string> {\n  if (type.includes(\"/\")) {\n    type = type.split(\"/\").slice(-2, -1)[0];\n  }\n  if (\n    type === \"weekly\" &&\n    moment(date, \"MMMDDYYYYHHmm\").diff(moment(), \"day\") < -6\n  ) {\n    fs.move(\n      path.join(dir, item),\n      path.join(\n        accomplishments,\n        type,\n        moment()\n          .day(-6)\n          .format(\"MMMDDYYYY\"),\n        item\n      )\n    );\n    return \"\";\n  } else if (\n    type === \"monthly\" &&\n    moment(date, \"MMMDDYYYYHHmm\").get(\"month\") < moment().get(\"month\")\n  ) {\n    fs.move(\n      path.join(dir, item),\n      path.join(\n        accomplishments,\n        type,\n        moment()\n          .month(moment().get(\"m\") - 1)\n          .format(\"MMMM-YYYY\"),\n        item\n      )\n    );\n    return \"\";\n  } else if (\n    type === \"yearly\" &&\n    moment(date, \"MMMDDYYYYHHmm\").get(\"year\") < moment().get(\"year\")\n  ) {\n    fs.move(\n      path.join(dir, item),\n      path.join(\n        accomplishments,\n        type,\n        moment()\n          .year(moment().get(\"y\") - 1)\n          .format(\"YYYY\"),\n        item\n      )\n    );\n    return \"\";\n  }\n  return `${chalk.green(prettyName(item))} ${chalk.gray(\n    \"- \" + moment(date, \"MMMDDYYYYHHmm\").fromNow()\n  )}\\n`;\n}\n"]}